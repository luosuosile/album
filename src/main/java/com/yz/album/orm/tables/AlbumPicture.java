/*
 * This file is generated by jOOQ.
*/
package com.yz.album.orm.tables;


import com.yz.album.orm.Album;
import com.yz.album.orm.Keys;
import com.yz.album.orm.tables.records.AlbumPictureRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlbumPicture extends TableImpl<AlbumPictureRecord> {

    private static final long serialVersionUID = -1972713496;

    /**
     * The reference instance of <code>album.album_picture</code>
     */
    public static final AlbumPicture ALBUM_PICTURE = new AlbumPicture();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlbumPictureRecord> getRecordType() {
        return AlbumPictureRecord.class;
    }

    /**
     * The column <code>album.album_picture.id</code>.
     */
    public final TableField<AlbumPictureRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>album.album_picture.album_id</code>.
     */
    public final TableField<AlbumPictureRecord, Integer> ALBUM_ID = createField("album_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>album.album_picture.picture_id</code>.
     */
    public final TableField<AlbumPictureRecord, Integer> PICTURE_ID = createField("picture_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>album.album_picture.sort</code>.
     */
    public final TableField<AlbumPictureRecord, Integer> SORT = createField("sort", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>album.album_picture</code> table reference
     */
    public AlbumPicture() {
        this("album_picture", null);
    }

    /**
     * Create an aliased <code>album.album_picture</code> table reference
     */
    public AlbumPicture(String alias) {
        this(alias, ALBUM_PICTURE);
    }

    private AlbumPicture(String alias, Table<AlbumPictureRecord> aliased) {
        this(alias, aliased, null);
    }

    private AlbumPicture(String alias, Table<AlbumPictureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Album.ALBUM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AlbumPictureRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ALBUM_PICTURE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AlbumPictureRecord> getPrimaryKey() {
        return Keys.KEY_ALBUM_PICTURE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AlbumPictureRecord>> getKeys() {
        return Arrays.<UniqueKey<AlbumPictureRecord>>asList(Keys.KEY_ALBUM_PICTURE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AlbumPictureRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AlbumPictureRecord, ?>>asList(Keys.ALBUM_PICTURE_IBFK_2, Keys.ALBUM_PICTURE_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumPicture as(String alias) {
        return new AlbumPicture(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AlbumPicture rename(String name) {
        return new AlbumPicture(name, null);
    }
}
