/*
 * This file is generated by jOOQ.
*/
package com.yz.album.orm.tables;


import com.yz.album.orm.Album;
import com.yz.album.orm.Keys;
import com.yz.album.orm.tables.records.UserAlbumFavoriteRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserAlbumFavorite extends TableImpl<UserAlbumFavoriteRecord> {

    private static final long serialVersionUID = -1620126774;

    /**
     * The reference instance of <code>album.user_album_favorite</code>
     */
    public static final UserAlbumFavorite USER_ALBUM_FAVORITE = new UserAlbumFavorite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserAlbumFavoriteRecord> getRecordType() {
        return UserAlbumFavoriteRecord.class;
    }

    /**
     * The column <code>album.user_album_favorite.id</code>.
     */
    public final TableField<UserAlbumFavoriteRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>album.user_album_favorite.user_id</code>.
     */
    public final TableField<UserAlbumFavoriteRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>album.user_album_favorite.album_id</code>.
     */
    public final TableField<UserAlbumFavoriteRecord, Integer> ALBUM_ID = createField("album_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>album.user_album_favorite.create_time</code>.
     */
    public final TableField<UserAlbumFavoriteRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>album.user_album_favorite.update_time</code>.
     */
    public final TableField<UserAlbumFavoriteRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>album.user_album_favorite</code> table reference
     */
    public UserAlbumFavorite() {
        this("user_album_favorite", null);
    }

    /**
     * Create an aliased <code>album.user_album_favorite</code> table reference
     */
    public UserAlbumFavorite(String alias) {
        this(alias, USER_ALBUM_FAVORITE);
    }

    private UserAlbumFavorite(String alias, Table<UserAlbumFavoriteRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserAlbumFavorite(String alias, Table<UserAlbumFavoriteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Album.ALBUM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserAlbumFavoriteRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_ALBUM_FAVORITE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserAlbumFavoriteRecord> getPrimaryKey() {
        return Keys.KEY_USER_ALBUM_FAVORITE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserAlbumFavoriteRecord>> getKeys() {
        return Arrays.<UniqueKey<UserAlbumFavoriteRecord>>asList(Keys.KEY_USER_ALBUM_FAVORITE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserAlbumFavoriteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserAlbumFavoriteRecord, ?>>asList(Keys.USER_ALBUM_FAVORITE_IBFK_1, Keys.USER_ALBUM_FAVORITE_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserAlbumFavorite as(String alias) {
        return new UserAlbumFavorite(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAlbumFavorite rename(String name) {
        return new UserAlbumFavorite(name, null);
    }
}
