/*
 * This file is generated by jOOQ.
*/
package com.yz.album.orm.tables;


import com.yz.album.orm.Album;
import com.yz.album.orm.Keys;
import com.yz.album.orm.tables.records.LoginLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LoginLog extends TableImpl<LoginLogRecord> {

    private static final long serialVersionUID = 2098223724;

    /**
     * The reference instance of <code>album.login_log</code>
     */
    public static final LoginLog LOGIN_LOG = new LoginLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LoginLogRecord> getRecordType() {
        return LoginLogRecord.class;
    }

    /**
     * The column <code>album.login_log.user_id</code>.
     */
    public final TableField<LoginLogRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>album.login_log.id</code>.
     */
    public final TableField<LoginLogRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>album.login_log.create_time</code>.
     */
    public final TableField<LoginLogRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>album.login_log</code> table reference
     */
    public LoginLog() {
        this("login_log", null);
    }

    /**
     * Create an aliased <code>album.login_log</code> table reference
     */
    public LoginLog(String alias) {
        this(alias, LOGIN_LOG);
    }

    private LoginLog(String alias, Table<LoginLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private LoginLog(String alias, Table<LoginLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Album.ALBUM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LoginLogRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LOGIN_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LoginLogRecord> getPrimaryKey() {
        return Keys.KEY_LOGIN_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LoginLogRecord>> getKeys() {
        return Arrays.<UniqueKey<LoginLogRecord>>asList(Keys.KEY_LOGIN_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<LoginLogRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LoginLogRecord, ?>>asList(Keys.LOGIN_LOG_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LoginLog as(String alias) {
        return new LoginLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LoginLog rename(String name) {
        return new LoginLog(name, null);
    }
}
