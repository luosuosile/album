/*
 * This file is generated by jOOQ.
*/
package com.yz.album.orm.tables;


import com.yz.album.orm.Album;
import com.yz.album.orm.Keys;
import com.yz.album.orm.tables.records.UserPayRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserPay extends TableImpl<UserPayRecord> {

    private static final long serialVersionUID = 54376761;

    /**
     * The reference instance of <code>album.user_pay</code>
     */
    public static final UserPay USER_PAY = new UserPay();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserPayRecord> getRecordType() {
        return UserPayRecord.class;
    }

    /**
     * The column <code>album.user_pay.id</code>.
     */
    public final TableField<UserPayRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>album.user_pay.user_id</code>.
     */
    public final TableField<UserPayRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>album.user_pay.pay_amount</code>.
     */
    public final TableField<UserPayRecord, Double> PAY_AMOUNT = createField("pay_amount", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>album.user_pay.meal_info</code>.
     */
    public final TableField<UserPayRecord, String> MEAL_INFO = createField("meal_info", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this, "");

    /**
     * The column <code>album.user_pay.channel_num</code>.
     */
    public final TableField<UserPayRecord, String> CHANNEL_NUM = createField("channel_num", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "");

    /**
     * The column <code>album.user_pay.create_time</code>.
     */
    public final TableField<UserPayRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>album.user_pay.payment_status</code>.
     */
    public final TableField<UserPayRecord, String> PAYMENT_STATUS = createField("payment_status", org.jooq.impl.SQLDataType.VARCHAR.length(11), this, "");

    /**
     * The column <code>album.user_pay.payment_id</code>.
     */
    public final TableField<UserPayRecord, String> PAYMENT_ID = createField("payment_id", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>album.user_pay.charge_channel</code>.
     */
    public final TableField<UserPayRecord, String> CHARGE_CHANNEL = createField("charge_channel", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "");

    /**
     * Create a <code>album.user_pay</code> table reference
     */
    public UserPay() {
        this("user_pay", null);
    }

    /**
     * Create an aliased <code>album.user_pay</code> table reference
     */
    public UserPay(String alias) {
        this(alias, USER_PAY);
    }

    private UserPay(String alias, Table<UserPayRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserPay(String alias, Table<UserPayRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Album.ALBUM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserPayRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_PAY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserPayRecord> getPrimaryKey() {
        return Keys.KEY_USER_PAY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserPayRecord>> getKeys() {
        return Arrays.<UniqueKey<UserPayRecord>>asList(Keys.KEY_USER_PAY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserPayRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserPayRecord, ?>>asList(Keys.USER_PAY_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserPay as(String alias) {
        return new UserPay(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPay rename(String name) {
        return new UserPay(name, null);
    }
}
