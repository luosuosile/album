/*
 * This file is generated by jOOQ.
*/
package com.yz.album.orm.tables;


import com.yz.album.orm.Album;
import com.yz.album.orm.Keys;
import com.yz.album.orm.tables.records.AlbumCategoryRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlbumCategory extends TableImpl<AlbumCategoryRecord> {

    private static final long serialVersionUID = 1967727152;

    /**
     * The reference instance of <code>album.album_category</code>
     */
    public static final AlbumCategory ALBUM_CATEGORY = new AlbumCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlbumCategoryRecord> getRecordType() {
        return AlbumCategoryRecord.class;
    }

    /**
     * The column <code>album.album_category.id</code>.
     */
    public final TableField<AlbumCategoryRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>album.album_category.album_id</code>.
     */
    public final TableField<AlbumCategoryRecord, Integer> ALBUM_ID = createField("album_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>album.album_category.category_id</code>.
     */
    public final TableField<AlbumCategoryRecord, Integer> CATEGORY_ID = createField("category_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>album.album_category</code> table reference
     */
    public AlbumCategory() {
        this("album_category", null);
    }

    /**
     * Create an aliased <code>album.album_category</code> table reference
     */
    public AlbumCategory(String alias) {
        this(alias, ALBUM_CATEGORY);
    }

    private AlbumCategory(String alias, Table<AlbumCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private AlbumCategory(String alias, Table<AlbumCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Album.ALBUM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AlbumCategoryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ALBUM_CATEGORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AlbumCategoryRecord> getPrimaryKey() {
        return Keys.KEY_ALBUM_CATEGORY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AlbumCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<AlbumCategoryRecord>>asList(Keys.KEY_ALBUM_CATEGORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AlbumCategoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AlbumCategoryRecord, ?>>asList(Keys.ALBUM_CATEGORY_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumCategory as(String alias) {
        return new AlbumCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AlbumCategory rename(String name) {
        return new AlbumCategory(name, null);
    }
}
