package com.yz.album.api.v1;

import com.yz.album.api.ApiVersion;
import com.yz.album.api.BaseApi;
import com.yz.album.api.dto.ApiResponse;
import com.yz.album.api.dto.Vip;
import com.yz.album.util.TimeUtil;
import org.jooq.DatePart;
import org.jooq.impl.DSL;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.bind.annotation.*;

import java.sql.Timestamp;
import java.text.ParseException;
import java.util.*;

@RestController("VipApi_v1")
@RequestMapping("/{version}/vip/")
@ApiVersion(1)
public class VipApi extends BaseApi {

    @Autowired
    public JdbcTemplate jdbcTemplate;

    /**
     * @param userId
     * @return
     * @throws ParseException
     */

    //判断指定用户是否是VIP
    @RequestMapping("isVip")
    public ApiResponse isVip(@RequestHeader Integer userId) throws ParseException {
        ApiResponse apiResponse = new ApiResponse();
        boolean exists = dslContext.fetchExists(dslContext.selectFrom(USER_VIP).where(USER_VIP.USER_ID.eq(userId)));


        //存在VIP表中的VIP有两种状态，一种是还没有失效，另一种是已经到期了
        //分支有2，A有效，B到期
        if (exists) {
            TimeUtil timeUtil = new TimeUtil();
            List<Object> params = new ArrayList<Object>();
            params.add(userId);

            //获取VIP信息
            Vip vip = dslContext.selectFrom(USER_VIP).where(USER_VIP.USER_ID.eq(userId)).orderBy(USER_VIP.CREATE_TIME).fetchOneInto(Vip.class);

            //是否是永久VIP。
            if (vip.getIsSuperVip().equals(1)) {
                vip.setRemainingTime(-1);
                apiResponse.setSuccessData(vip);
                return apiResponse;
            }

            //计算剩余时间
            long remainingTime = vip.getExpiredTime().getTime() - System.currentTimeMillis();

            // B 如果剩余时间小于0那么失效
            if (remainingTime < 0) {
                vip.setRemainingTime(0);
                apiResponse.setSuccessData("200");
            }
            // A 剩余时间大于0，将剩余时间转成天数，放入VIP模型，返回给客户端
            else {
                int remainingTimeOut = (int) timeUtil.millChangeFormat(remainingTime, "dd");
                vip.setRemainingTime(remainingTimeOut + 1);
                apiResponse.setSuccessData(vip);
            }
        }
        //不存在表中，不是VIP
        else {
            String data = "200";
            apiResponse.setSuccessData(data);
        }
        return apiResponse;
    }

    /**
     *
     * APP客户端会生成一个订单ID，然后这个接口第一件事是记录一条订单
     *
     *
     * @param userId
     * @param payAmount
     * @param mealInfo
     * @return
     * @throws ParseException
     */

    //支付接口，购买VIP
    @RequestMapping("/paid/{payAmount}/{mealInfo}/{paymentId}")
    public ApiResponse isPaid(
            @RequestHeader Integer userId, @PathVariable("payAmount") Double payAmount,
            @RequestHeader() String channelNum, @PathVariable("mealInfo") String mealInfo,
            @PathVariable("paymentId") String paymentId,
            @RequestParam(required = false)String charge_channel) throws ParseException {
        ApiResponse apiResponse = new ApiResponse();

        Integer isSuperVip = 0;
        if (mealInfo.equals("forever")) {
            isSuperVip = 1;
        }

        TimeUtil timeUtil = new TimeUtil();

        //在USER_PAY表记录支付信息
         dslContext.insertInto(USER_PAY)
                .columns(USER_PAY.USER_ID, USER_PAY.PAY_AMOUNT, USER_PAY.MEAL_INFO, USER_PAY.CHANNEL_NUM,USER_PAY.PAYMENT_ID,USER_PAY.CHARGE_CHANNEL)
                .values(userId, payAmount, mealInfo, channelNum,paymentId,charge_channel).execute();
        //
        //判断用户是不是VIP会员,a是，b不是
        boolean exists = dslContext.fetchExists(dslContext.selectFrom(USER_VIP).where(USER_VIP.USER_ID.eq(userId)));
        //情况A是VIP会员
        if (exists) {
            //获取对应VIP信息
            Vip vip = dslContext.selectFrom(USER_VIP).where(USER_VIP.USER_ID.eq(userId)).fetchOneInto(Vip.class);
            long lasttime = vip.getExpiredTime().getTime();

            Calendar calendar = Calendar.getInstance();
            calendar.setTime(new Date());

            //判断是不是超级会员（暂时停用永久会员，但不妨碍代码）
            if (isSuperVip == 0) {//不是永久会员

                //A1 情况分支一，会员还没失效
                if (calendar.getTimeInMillis() < lasttime) {
                    //并且还没有失效，在原基础更新时间
                    dslContext.update(USER_VIP)
                            .set(USER_VIP.EXPIRED_TIME, DSL.timestampAdd(USER_VIP.EXPIRED_TIME, timeUtil.getRemainTime(mealInfo) / 1000, DatePart.SECOND)).where(USER_VIP.USER_ID.eq(userId)).execute();
                    apiResponse.setSuccess();

                   // A2情况分支2，会员已经失效
                } else {//假如失效了，不在原基础更新时间，而是重新设定一个到期时间
                    dslContext.update(USER_VIP)
                            .set(USER_VIP.EXPIRED_TIME, Timestamp.valueOf(timeUtil.millToDate((long) timeUtil.getLastTime(mealInfo))))
                            .where(USER_VIP.USER_ID.eq(userId)).execute();
                }
            } else if (isSuperVip == 1) {//是超级会员，也就是本来就是超级会员，又购买了一次vip的情况（得看超级会员是不是永久会员，是的话无所谓，不是的话也要分两种，暂时没有超级会员在出售）
                dslContext.update(USER_VIP).set(USER_VIP.IS_SUPER_VIP, isSuperVip).where(USER_VIP.USER_ID.eq(userId)).execute();
            } else {
                apiResponse.setMsg("你在是否是永久会员那个字段输入了0或者1以外的数字，写入失败");
            }


            //情况B不是VIP会员
        } else {//用户没有购买过
            double lastday = 0;

            //分支有两种，购买的是超级会员，亦或者购买的是普通会员

            //购买的是普通会员
            if (isSuperVip != 1) {
                //lastday是指有效期最后一日的日期
                lastday = timeUtil.getLastTime(mealInfo);
            }
            //购买的是超级会员
            else {
                lastday = 9999999999999.0;
            }

            /**
             * 用户ID,用户是否是永久会员，用户的过期时间
             */
            dslContext.insertInto(USER_VIP).columns(USER_VIP.USER_ID, USER_VIP.IS_SUPER_VIP, USER_VIP.EXPIRED_TIME)
                    .values(userId, isSuperVip, Timestamp.valueOf(timeUtil.millToDate((long)lastday)))
                    .execute();
            apiResponse.setSuccessData(0);
        }
        return apiResponse;
    }

    /**
     * 订单记录状态的变更，APP发来，来验证这个订单是否付费成功。一般APP需要数分钟来验证订单是否付费成功，所以需要这个接口
     * @param payStatus
     * @param userId
     * @param paymentId
     * @return
     * @throws ParseException
     */
    //更新状态
    @RequestMapping("/update/payStatus")
    public ApiResponse updatePayMent(@RequestParam String payStatus,
                                     @RequestHeader Integer userId,
                                     @RequestParam String paymentId) throws ParseException {
        ApiResponse apiResponse = new ApiResponse();

        boolean exists = dslContext.fetchExists(dslContext.selectFrom(USER_PAY).where(USER_PAY.PAYMENT_ID.eq(paymentId)));
        if (exists) {
            dslContext.update(USER_PAY).set(USER_PAY.PAYMENT_STATUS,payStatus).where(USER_PAY.PAYMENT_ID.eq(paymentId)).execute();
            Map<String, Object> map = new HashMap<>();
            map.put("status", "0");
            map.put("explain", "更新状态成功");
            apiResponse.setSuccessData(map);
        } else {
            apiResponse.setData(1);
            apiResponse.setMsg("订单ID不存在");
        }
        return apiResponse;
    }
}
