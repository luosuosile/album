package com.yz.album.api.v1;

import com.yz.album.api.ApiVersion;
import com.yz.album.api.BaseApi;
import com.yz.album.api.dto.ApiResponse;
import com.yz.album.api.dto.Vip;
import com.yz.album.util.TimeUtil;
import org.jooq.DatePart;
import org.jooq.impl.DSL;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.bind.annotation.*;

import java.sql.Timestamp;
import java.text.ParseException;
import java.util.*;

@RestController("VipApi_v1")
@RequestMapping("/{version}/vip/")
@ApiVersion(1)
public class VipApi extends BaseApi {

    @Autowired
    public JdbcTemplate jdbcTemplate;

    /**
     * @param userId
     * @return
     * @throws ParseException
     */

    @RequestMapping("isVip")
    public ApiResponse isVip(@RequestHeader Integer userId) throws ParseException {
        ApiResponse apiResponse = new ApiResponse();
        boolean exists = dslContext.fetchExists(dslContext.selectFrom(USER_VIP).where(USER_VIP.USER_ID.eq(userId)));

        if (exists) {//如果在VIP表
            TimeUtil timeUtil = new TimeUtil();
            List<Object> params = new ArrayList<Object>();
            params.add(userId);

            Vip vip = dslContext.selectFrom(USER_VIP).where(USER_VIP.USER_ID.eq(userId)).orderBy(USER_VIP.CREATE_TIME).fetchOneInto(Vip.class);
            if (vip.getIsSuperVip().equals(1)) {
                vip.setRemainingTime(-1);
                apiResponse.setSuccessData(vip);
                return apiResponse;
            }

            long remainingTime = vip.getExpiredTime().getTime() - System.currentTimeMillis();
            if (remainingTime < 0) {
                vip.setRemainingTime(0);
                apiResponse.setSuccessData("200");
            } else {
                int remainingTimeOut = (int) timeUtil.millChangeFormat(remainingTime, "dd");
                vip.setRemainingTime(remainingTimeOut + 1);
                apiResponse.setSuccessData(vip);
            }

        } else {
            String data = "200";
            apiResponse.setSuccessData(data);
        }
        return apiResponse;
    }

    /**
     * @param userId
     * @param payAmount
     * @param mealInfo
     * @return
     * @throws ParseException
     */
    @RequestMapping("/paid/{payAmount}/{mealInfo}/{paymentId}")
    public ApiResponse isPaid(
            @RequestHeader Integer userId, @PathVariable("payAmount") Double payAmount,
            @RequestHeader() String channelNum, @PathVariable("mealInfo") String mealInfo,
            @PathVariable("paymentId") String paymentId,
            @RequestParam(required = false)String charge_channel) throws ParseException {
        ApiResponse apiResponse = new ApiResponse();

        Integer isSuperVip = 0;
        if (mealInfo.equals("forever")) {
            isSuperVip = 1;
        }

        TimeUtil timeUtil = new TimeUtil();
        //这里在一个记录支付的表中记录支付信息
         dslContext.insertInto(USER_PAY)
                .columns(USER_PAY.USER_ID, USER_PAY.PAY_AMOUNT, USER_PAY.MEAL_INFO, USER_PAY.CHANNEL_NUM,USER_PAY.PAYMENT_ID,USER_PAY.CHARGE_CHANNEL)
                .values(userId, payAmount, mealInfo, channelNum,paymentId,charge_channel).execute();
        //

        boolean exists = dslContext.fetchExists(dslContext.selectFrom(USER_VIP).where(USER_VIP.USER_ID.eq(userId)));
        if (exists) {//用户已经是会员了
            Vip vip = dslContext.selectFrom(USER_VIP).where(USER_VIP.USER_ID.eq(userId)).fetchOneInto(Vip.class);
            long lasttime = vip.getExpiredTime().getTime();

            Calendar calendar = Calendar.getInstance();
            calendar.setTime(new Date());
            if (isSuperVip == 0) {//不是超级会员
                if (calendar.getTimeInMillis() < lasttime) {
                    //并且还没有失效
                    dslContext.update(USER_VIP)
                            .set(USER_VIP.EXPIRED_TIME, DSL.timestampAdd(USER_VIP.EXPIRED_TIME, timeUtil.getRemainTime(mealInfo) / 1000, DatePart.SECOND)).where(USER_VIP.USER_ID.eq(userId)).execute();
                    apiResponse.setSuccess();
                } else {//假如失效了
                    dslContext.update(USER_VIP)
                            .set(USER_VIP.EXPIRED_TIME, Timestamp.valueOf(timeUtil.millToDate((long) timeUtil.getLastTime(mealInfo))))
                            .where(USER_VIP.USER_ID.eq(userId)).execute();
                }
            } else if (isSuperVip == 1) {//是超级会员
                dslContext.update(USER_VIP).set(USER_VIP.IS_SUPER_VIP, isSuperVip).where(USER_VIP.USER_ID.eq(userId)).execute();
            } else {
                apiResponse.setMsg("你在是否是永久会员那个字段输入了0或者1以外的数字，写入失败");
            }
        } else {//用户没有购买过
            double lastday = 0;
            if (isSuperVip != 1) {
                lastday = timeUtil.getLastTime(mealInfo);//如果是超级会员会出错
            } else {
                lastday = 9999999999999.0;
            }
            dslContext.insertInto(USER_VIP).columns(USER_VIP.USER_ID, USER_VIP.IS_SUPER_VIP, USER_VIP.EXPIRED_TIME)
                    .values(userId, isSuperVip, Timestamp.valueOf(timeUtil.millToDate((long) timeUtil.getLastTime(mealInfo))))
                    .execute();
            apiResponse.setSuccessData(0);
        }
        return apiResponse;
    }

    @RequestMapping("/update/payStatus")
    public ApiResponse updatePayMent(@RequestParam String payStatus,
                                     @RequestHeader Integer userId,
                                     @RequestParam String paymentId) throws ParseException {
        ApiResponse apiResponse = new ApiResponse();

        boolean exists = dslContext.fetchExists(dslContext.selectFrom(USER_PAY).where(USER_PAY.PAYMENT_ID.eq(paymentId)));
        if (exists) {
            dslContext.update(USER_PAY).set(USER_PAY.PAYMENT_STATUS,payStatus).where(USER_PAY.PAYMENT_ID.eq(paymentId)).execute();
            Map<String, Object> map = new HashMap<>();
            map.put("status", "0");
            map.put("explain", "更新状态成功");
            apiResponse.setSuccessData(map);
        } else {
            apiResponse.setData(1);
            apiResponse.setMsg("订单ID不存在");
        }
        return apiResponse;
    }
}
